{"version":3,"sources":["components/Header.js","images/Bellatrix.jpeg","images/Draco.jpeg","images/Dumbledore.jpeg","images/Hagrid.jpeg","images/Harry.jpeg","images/Hermione.jpeg","images/Lupin.jpeg","images/Ron.jpeg","images/Sirius.jpeg","images/Slughorn.jpeg","images/Snape.jpeg","images/Voldemort.jpeg","components/MemoryCardImages.js","components/MemoryCard.js","components/MemoryCardContainer.js","App.js","index.js"],"names":["Header","props","className","currentScore","highScore","maxScore","CardImages","id","clicked","name","image","bellatrix","backgroundColor","draco","dumbledore","hagrid","harry","hermione","lupin","ron","sirius","slughorn","snape","voldemort","MemoryCard","onClick","e","memoryCardIsClicked","style","backgroundImage","card","MemoryCardContainer","incrementCurrentScore","handleHighScore","handleGameOver","setMaxScoreGame","useState","MemoryCardImages","cards","setCards","clonedMemoryCardImages","currentTarget","useLayoutEffect","length","useEffect","newCards","array","i","j","Math","floor","random","shuffleArray","map","index","App","setCurrentScore","setHighScore","setMaxScore","prevCurrentScore","arrayLength","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b91d8948.chunk.js","sourcesContent":["import React from \"react\";\nimport '../styles/Header.scss';\n\nconst Header = (props) => {\n  return (\n    <div className=\"header\">\n      <div className=\"header-title\">\n      Harry Potter<br></br>Memory Card Game\n      </div>\n      <div className=\"header-scoreboard\">\n        <div className=\"header-scoreboard-title-value\">\n          <div className=\"header-scoreboard-title\">Score</div>\n          <div className=\"header-scoreboard-value\">{props.currentScore}</div>\n        </div>\n        <div className=\"header-scoreboard-title-value\">\n          <div className=\"header-scoreboard-title\">High Score</div>\n          <div className=\"header-scoreboard-value\">{props.highScore}</div>\n        </div>\n        <div className=\"header-scoreboard-title-value\">\n          <div className=\"header-scoreboard-title\">Max Score</div>\n          <div className=\"header-scoreboard-value\">{props.maxScore}</div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Header;\n","export default __webpack_public_path__ + \"static/media/Bellatrix.7786a34e.jpeg\";","export default __webpack_public_path__ + \"static/media/Draco.73a86528.jpeg\";","export default __webpack_public_path__ + \"static/media/Dumbledore.e16b7f48.jpeg\";","export default __webpack_public_path__ + \"static/media/Hagrid.cc0c24d2.jpeg\";","export default __webpack_public_path__ + \"static/media/Harry.a5766b49.jpeg\";","export default __webpack_public_path__ + \"static/media/Hermione.7a63d376.jpeg\";","export default __webpack_public_path__ + \"static/media/Lupin.2360a942.jpeg\";","export default __webpack_public_path__ + \"static/media/Ron.7a3cd9a0.jpeg\";","export default __webpack_public_path__ + \"static/media/Sirius.80ccddf7.jpeg\";","export default __webpack_public_path__ + \"static/media/Slughorn.4daf40d0.jpeg\";","export default __webpack_public_path__ + \"static/media/Snape.297968f9.jpeg\";","export default __webpack_public_path__ + \"static/media/Voldemort.15a3269e.jpeg\";","import bellatrix from \"../images/Bellatrix.jpeg\";\nimport draco from \"../images/Draco.jpeg\";\nimport dumbledore from \"../images/Dumbledore.jpeg\";\nimport hagrid from \"../images/Hagrid.jpeg\";\nimport harry from \"../images/Harry.jpeg\";\nimport hermione from \"../images/Hermione.jpeg\";\nimport lupin from \"../images/Lupin.jpeg\";\nimport ron from \"../images/Ron.jpeg\";\nimport sirius from \"../images/Sirius.jpeg\";\nimport slughorn from \"../images/Slughorn.jpeg\";\nimport snape from \"../images/Snape.jpeg\";\nimport voldemort from \"../images/Voldemort.jpeg\";\n\nconst CardImages = () => {\n  return (\n    [\n      {\n        id: 1,\n        clicked: false,\n        name: \"Bellatrix\",\n        image: bellatrix,\n        backgroundColor: \"green\"\n      },\n      {\n        id: 2,\n        clicked: false,\n        name: \"Draco\",\n        image: draco,\n        backgroundColor: \"red\"\n      },\n      {\n        id: 3,\n        clicked: false,\n        name: \"Dumbledore\",\n        image: dumbledore,\n        backgroundColor: \"orange\"\n      },\n      {\n        id: 4,\n        clicked: false,\n        name: \"Hagrid\",\n        image: hagrid,\n        backgroundColor: \"brown\"\n      },\n      {\n        id: 5,\n        clicked: false,\n        name: \"Harry\",\n        image: harry,\n        backgroundColor: \"blue\"\n      },\n      {\n        id: 6,\n        clicked: false,\n        name: \"Hermione\",\n        image: hermione,\n        backgroundColor: \"white\"\n      },\n      {\n        id: 7,\n        clicked: false,\n        name: \"Lupin\",\n        image: lupin,\n        backgroundColor: \"#ddd\"\n      },\n      {\n        id: 8,\n        clicked: false,\n        name: \"Ron\",\n        image: ron,\n        backgroundColor: \"pink\"\n      },\n      {\n        id: 9,\n        clicked: false,\n        name: \"Sirius\",\n        image: sirius,\n        backgroundColor: \"yellow\"\n      },\n      {\n        id: 10,\n        clicked: false,\n        name: \"Slughorn\",\n        image: slughorn,\n        backgroundColor: \"lightblue\"\n      },\n      {\n        id: 11,\n        clicked: false,\n        name: \"Snape\",\n        image: snape,\n        backgroundColor: \"lightgreen\"\n      },\n      {\n        id: 12,\n        clicked: false,\n        name: \"Voldemort\",\n        image: voldemort,\n        backgroundColor: \"grey\"\n      }\n    ]\n  )\n}\n\nexport default CardImages;\n","import React from \"react\";\nimport '../styles/MemoryCard.scss';\n\nconst MemoryCard = (props) => {\n  return (\n    <div id={props.id} className=\"memory-card-container-item\" onClick={e => props.memoryCardIsClicked(e)}>\n      <div className=\"memory-card-container-item-bg-image\" style={{backgroundImage: `url(${props.card.image})`}}></div>\n      <div className=\"memory-card-container-item-name\">{props.card.name}</div>\n    </div>\n  )\n}\n\nexport default MemoryCard;\n","import React, { useState, useEffect, useLayoutEffect } from \"react\";\nimport '../styles/MemoryCardContainer.scss';\nimport MemoryCardImages from \"./MemoryCardImages\";\nimport MemoryCard from \"./MemoryCard\";\n\nconst MemoryCardContainer = (props) => {\n  const { incrementCurrentScore, handleHighScore, handleGameOver, currentScore, setMaxScoreGame } = props;\n\n  const [cards, setCards] = useState(MemoryCardImages);\n\n  const memoryCardIsClicked = (e) => {\n    const clonedMemoryCardImages = cards;\n    // Check if the memory card has already been clicked\n    if (clonedMemoryCardImages[e.currentTarget.id].clicked === true) {\n      handleGameOver()\n      // Reset the memorycards to its original state for a new game so that all card clicked values are false\n      setCards(MemoryCardImages)\n    }\n    else {\n      clonedMemoryCardImages[e.currentTarget.id].clicked = true\n      incrementCurrentScore()\n      // Update the clicked card in the cards state with a clicked key value of true\n      setCards(\n        clonedMemoryCardImages\n      )\n    }\n  }\n\n  const shuffleArray = (array) => {\n    // Shuffle the memorycards in a random order\n    for (let i = array.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [array[i], array[j]] = [array[j], array[i]];\n    }\n  }\n\n  useLayoutEffect(() => {\n    // Set the maxScoreGame state to the amount of memorycards to display the maximum score when the components mounts\n    // useLayoutEffect is used here instead of useEffect to prevent the maxScore scss positioning from changing on display when updating\n    setMaxScoreGame(cards.length);\n  }, []);\n\n  useLayoutEffect(() => {\n    // Update the highscore after the currentscore has been changed\n    // useLayoutEffect is used here instead of useEffect to display the updated highScore at the same time on display as the currentScore gets updated\n    handleHighScore()\n  }, [currentScore]);\n\n  useEffect(() => {\n    // Shuffle the array of cards in cards state after the currentscore has been changed\n    const newCards = [...cards];\n    shuffleArray(newCards);\n    setCards(newCards);\n  }, [currentScore]);\n\n  return (\n    <div className=\"memory-card-container\">\n      {cards.map((card, index) => (\n        <MemoryCard \n          key={index}\n          id={index} \n          card={card} \n          memoryCardIsClicked={memoryCardIsClicked}\n        />\n      ))}\n    </div>\n  )\n}\n\nexport default MemoryCardContainer;\n","import React, { useState } from \"react\";\nimport './styles/App.scss';\nimport Header from \"./components/Header\";\nimport MemoryCardContainer from \"./components/MemoryCardContainer\";\n\nconst App = () => {\n  const [currentScore, setCurrentScore] = useState(0);\n  const incrementCurrentScore = () => {\n    setCurrentScore((prevCurrentScore) =>\n      prevCurrentScore + 1\n    )\n  }\n\n  const [highScore, setHighScore] = useState(0);\n  const handleHighScore = () => {\n    if (currentScore > highScore) {\n      setHighScore(currentScore);\n    }\n  }\n  \n  const [maxScore, setMaxScore] = useState(12);\n  const setMaxScoreGame = (arrayLength) => {\n    setMaxScore(arrayLength);\n  }\n\n  const resetCurrentScore = () => {\n    setCurrentScore(0);\n  }\n\n  const handleGameOver = () => {\n    resetCurrentScore();\n  }\n\n  return (\n    <div className=\"App\">\n      <Header currentScore={currentScore} highScore={highScore} maxScore={maxScore}/>\n      <MemoryCardContainer \n        incrementCurrentScore={incrementCurrentScore}\n        handleHighScore={handleHighScore}\n        handleGameOver={handleGameOver}\n        currentScore={currentScore}\n        setMaxScoreGame={setMaxScoreGame}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.scss';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}